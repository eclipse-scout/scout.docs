#
# Copyright (c) 2022 BSI Business Systems Integration AG.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Distribution License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/org/documents/edl-v10.html
#
# Contributors:
#     BSI Business Systems Integration AG - initial API and implementation
#
AboutText=Made with Eclipse Scout {0}.\r\n<p>\r\nPlease see <a href\="https\://eclipsescout.github.io/">https\://eclipsescout.github.io</a> for documentation and other resources.\r\n</p>
Accordion=Accordion
AccordionTextGroup=This is the body of the current group. You can use any widget as body, in this case a LabelField is used.\r\nEvery group in an accordion is as height as its content.
AddChildNode=Add child node
AddNode=Add node
AddRow=Add row
AnchorBoundsTooltip=If set, the popup will use the given bounds as anchor. The format is\: x,y,width,height
AppDescription=Here you will find a demonstration of the Scout JS widgets. You can try them out and get a feel of how they are used. You should also try to adjust some properties and see what happens. Every widget comes with default settings but most of them are configurable to serve different purposes.\n<p>\nEvery widget page is structured the same way\: You will find the widget itself on top of the page. On the bottom is the configuration area where you can adjust the properties, execute actions or listen for events.\n<p>\nIn fact this application is not only supposed to show you the widgets but may also serve you as API reference. You can see what is possible and how the widgets are used.\n<p>\nAll the code is available on <a href\="https\://github.com/bsi-software/org.eclipse.scout.docs/tree/releases/{0}/code/widgets/org.eclipse.scout.jswidgets.ui.html">GitHub</a>.\n<p>\nYou should also check out the documentation about Scout JS in the <a href\="https\://eclipsescout.github.io/{0}/technical-guide-js.html">technical guide</a>.\n<p>\nHave fun\!
AppWelcome=Welcome to the Scout JS Widgets Application
AskToSaveChangesOnCancel=Ask to save changes on cancel
AutoDateTooltip=The auto date is the date which is preselected when the user clicks in an empty date field or presses the up or down key.\r\nIf the auto date is null, the current day is used instead.
AutoOptimizeColumnWidthsTooltip=If set on a column, the column will always be as width as its content. If not set, the user can still optimize the width manually by double clicking the separator between two columns.
AutoResizeColumnsTooltip=If set, the columns will take all the available width of the table. The configured width of the columns is used as weight for the width calculation and also as minimal width.
BlockFormatTooltip=Using a formatter and parser you can adjust the text the user typed.\r\nTry it by selecting this check box and entering a long string into the string field (like 12345678).
BreadcrumbClickedX=Breadcrumb item clicked with ref\: {0}
ButtonClickMessage=The button action may be triggered by clicking the button, pressing space or enter or by pressing the configured key stroke.
Calculator=Calculator
CancelMenuTooltip=Closes the form if there are no changes made. Otherwise it shows a message box asking to save the changes.
Carousel=Carousel
ClearEventLog=Clear event log
CloseMenuTooltip=Closes the form and discards any unsaved changes.
DateField=Date Field
DelayTooltip=Delay in milliseconds until notification is displayed.
DeleteAll=Delete all
DeleteAllChildNodes=Delete all child nodes
DeleteAllNodes=Delete all nodes
DeleteNode=Delete node
DeleteRow=Delete row
DesktopDescription=The desktop is the main widget of a Scout application and the root of every other widget. The default desktop basically consists of a navigation, a header and a bench.
DropMaximumSizeTooltip=Maximum file size in bytes that is accepted when a file is dropped.
DurationTooltip=Duration in milliseconds while the notification is displayed.\n\nA value <\= 0 indicates an infinite duration, i.e. the notification is never closed automatically.
EventLog=Event Log
EventsOverview=Every widget can trigger events. Events are the result of actions, like clicking a button or deleting a row in a table. Changing a property will result in an event, too, a so called property change event.\n<br>You can listen for events by attaching an event handler. The event log below uses such an event handler and displays every triggered event for this widget. Try to interact with the widget or adjust some properties and see what happens.\n<p>\nCheck out the <a href\="https\://eclipsescout.github.io/{0}/technical-guide-js.html\#events">technical guide</a> for more details.\n</p>
ExceptionWhileSaving=Exception while saving
ExclusiveExpandTooltip=If checked, only one group may be expanded at the same time
FileChooserAcceptTypesTooltip=Examples\:\r\naudio/*\r\nvideo/*\r\nimage/*\r\n.mp4
FileChooserChosenFiles=Chosen files
FileChooserMaximumUploadSizeTooltip=Maximum file size in bytes that is accepted by the file chooser field.
FileChooserNFilesChosen={0} files chosen\:
FileChooserNoFilesChosen=No files chosen
FileChooserOneFileChosen=One file chosen\:
FilesDroppedSuccessfully=Files dropped successfully.
FocusTooltip=Tries to set the focus on the widget.\r\n\r\nReturns true if the element could be focused, false if not.
Form=Form
FormFieldStatusMessage=This is a status with severity {0}
GroupBox=Group Box
GroupBoxScrollableTooltip=If set, the group box will show vertical scrollbars when it is too small to display all the content. If the property is not set explicitly, only the main box will be scrollable by default.\r\n\r\nWhen setting the property to true, remember to fix the height of the group box because the group box is by default as height as its content (useUiHeight is true).
GroupNo=Group no.
HasCloseButton=Has close button
HasCloseButtonTooltip=If the form has a close button, pressing the "x" icon will call close(), otherwise cancel() is called which will show a message if there are unsaved changes.
HierarchicalTableField=Hierarchical Table Field
InheritAccessibilityTooltip=Configures whether the widget inherits the enabled state of its parent widget.\n\nFor example a menu of a table field with inheritAccessibility \= true is automatically disabled if the table field is disabled.
IntegerField=Integer Field
LabelFieldValue=This is the value of a label field
LabelValue=The purpose of this simple widget is to display text, either plain text or HTML text. HTML tags are encoded by default, so if you would like to display HTML content you need to set the property <i>htmlEnabled</i> to true. Try it out now to make the encoded tags in this text disappear.<br>\r\nA label is also able to display app links. App links create an event when clicked which you can listen for and execute an action. The following link is an app link\: <span class\="app-link" data-ref\="link_ref">Click me</span><br>\r\n<br>\r\nPlease note\: a label is not the same as a label field. A label field extends 'ValueField' and is a form field whereas the label is a simple widget. If you work with forms you should be using 'LabelField', if you work with plain widgets you can use a 'Label'.
LanguageTagShort=Tag
LifecycleData=Life cycle data
Locale=Locale
LogicalGridTooltip=The logical grid defines, how the fields are arranged inside the container.\r\n\r\nThe Horizontal Grid arranges them from left to right.\r\nThe Vertical Grid arranges them from top to bottom.
LogicalGridWithRefTooltip=The logical grid defines, how the fields are arranged inside the container.\r\n\r\nThe Horizontal Grid arranges them from left to right.\r\nThe Vertical Grid arranges them from top to bottom.\r\n\r\nSee also the Logical Grid demo to get a feeling what the individual grid data properties mean.
MenuBar=Menu Bar
MenuClickMessage=Menu with label '{0}' has been activated.
MenuShrinkableTooltipText=If this property is set to true, the text of the menu will be removed if there is not enough space to display both the icon and and text. If there is not even enough space to display the icon, it will be stacked into the ellipsis menu (if the property stackable is set to true).
MenuStackableTooltipText=If this property is set to true, the menu will be put into an ellipsis menu if there is not enough space to display it. You can try it out by making the browser window smaller.
Move=Move
MoveDown=Move down
MoveToBottom=Move to bottom
MoveToTop=Move to top
MoveUp=Move up
MultilineSmartField=Multiline Smart Field
NativeNotificationVisibilityTooltip=none\: No native notification is shown.\nbackground\: The native notification is only shown if the application is in background.\nalways\: The native notification is always shown.
NativeOnlyTooltip=True, to only show the native desktop notification. \nFalse, to show both, the regular and the native notification. If and when a native desktop notification is shown is controlled by the field "Native Notification".
NewLanguageMenu=Add new language
NewLanguageMessage=Unfortunately I cannot really add a language because I am here for demonstration purposes only.
NotificationMessage=This is a notification with severity {0}
NumberColumn=Number Column
NumberField=Number Field
NumberFieldCalculatorHint=Every number field supports basic calculations, try it by entering a formula like 3+3 and press "tab".
OkMenuTooltip=Saves and closes the form.
OpenForm=Open form
OpenLifecycleForm=Open life cycle form
OpenPopup=Open Popup
ProcessButtonTooltip=This property defines whether the button should be placed in the menu bar or in the group box body grid along with the other fields.
ProposalField=Proposal Field
ResetMenuTooltip=Resets the form to its initial state.
RevealTooltip=Brings the widget into view by scrolling the first scrollable parent. The action does not have any effect if the widget is already fully visible or there is no scrollbar. \r\n\r\nIn order to test it make the window smaller so that the scrollbar appears, then scroll the widget out of view and press the button.
Salutation=Salutation
SaveMenuTooltip=Saves the changes without closing the form.
Settings=Settings
SmartField=Smart Field
SpellCheckEnabledTooltip=This flag requires the spell checker of the browser to be enabled (check browser settings).\r\n\r\nAlso, depending on your browser, changing the flag dynamically may not have an immediate effect. Try to adjust the text, leave the field (focus out) or rerender the field (navigate to another widget and come back) to force the browser to reapply the setting.
StatusMessage=This is a status with severity {0}
StringField=String Field
StringFieldHasActionMessage=If hasAction is true, the string field triggers an event called "action" when the icon is clicked.
TabBox=Tab Box
TableField=Table Field
TagBarPropertiesTooltip=The tag bar is the element containing the tags without the input field on the right of the tags.\nTherefore, the properties in this box only affect the tag bar and not the input field.
TagClickMessage=Tag {0} has been clicked.
Target=Target
Thanks=Thanks
ThanksForClickingMe=Thanks for clicking me\!
Theme=Theme
TileAccordion=Tile Accordion
TileField=Tile Field
TileGridStatus=Total tiles\: {0}, filtered\: {1}, selected\: {2}
TileGridVirtualTooltip=Virtual relates to the term "Virtual Scrolling". This means, only the tiles in the view port and some more will be rendered. The others will be rendered as soon as they will be moved into the view port, either by scrolling or by any other action like sorting, filtering etc.\r\n\r\nThis can lead to a big performance boost when having many tiles, especially on Internet Explorer, but other browsers benefit as well.\r\n\r\nTo make Virtual Scrolling work, the real width and height needs to be known so that scroll bar position can be calculated correctly. This means Virtual Scrolling does only work if all tiles have the same size, so the following grid properties cannot be used\: useUiWidth, useUiHeight, widthInPixel, heightInPixel, w, h, x, y.\r\n\r\nIf these preconditions are given, you can use the virtual mode and your grid will be able to handle a lot of tiles.
TileTypeTooltip=The type of newly inserted tiles.\r\n\r\nThe content and visualization of a tile heavily depends on the use case. If you just want to display some data in a tile grid without the need of a custom styling and elaborated tile layout you can use a HtmlTile with the default display style.\r\n\r\nIf you want more control over the styling, just set a custom CSS class and add some rules. If you don't like the default rules you can also set the display style to PLAIN so that these default styles are not applied.\r\n\r\nIf you want even more control about the layout and content you can create a custom tile instead of using the HtmlTile as it is done here with CustomTile.js.
Toggle=Toggle
TrackLocationTooltipText=If true, the location property is updated whenever the location of the iframe changes.\n\nNote\: This does only work if the iframe and the iframe's parent document have the same origin (protocol, port and host are the same).
TreeSmartField=Tree Smart Field
Widgets=Widgets
YoureWelcome=You're welcome
